{"version":3,"sources":["component/AutoCompleteText.js","countries.js","nba.js","App.js","serviceWorker.js","index.js"],"names":["AutoCompleteText","props","onTextChange","e","items","value","target","suggestion","length","regex","RegExp","sort","filter","v","test","setState","text","state","this","map","item","onClick","suggesSelected","className","onChange","type","renderSuggestion","React","Component","split","App","href","countries","nba","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAGqBA,E,kDAGpB,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAQNC,aAAe,SAACC,GAAO,IACfC,EAAU,EAAKH,MAAfG,MACDC,EAAQF,EAAEG,OAAOD,MACnBE,EAAa,GACjB,GAAI,EAAIF,EAAMG,OAAO,CACpB,IAAMC,EAAQ,IAAIC,OAAJ,WAAeL,GAAS,KACtCE,EAAaH,EAAMO,OAAOC,QAAO,SAAAC,GAAC,OAAIJ,EAAMK,KAAKD,MAElD,EAAKE,SAAS,CAACR,aAAYS,KAAMX,KAflC,EAAKY,MAAQ,CACZV,WAAY,GACZS,KAAM,IAJU,E,2DAoBFX,GACda,KAAKH,SAAS,CAACR,WAAY,GAAIS,KAAMX,M,yCAGlB,IAAD,OACVE,EAAeW,KAAKD,MAApBV,WAER,OAA0B,IAAtBA,EAAWC,OACN,8BAIR,4BACED,EAAWY,KAAI,SAACC,GAAD,OAAU,wBAAIC,QAAS,kBAAM,EAAKC,eAAeF,KAAQA,S,+BAOpE,IACDJ,EAAQE,KAAKD,MAAbD,KAEP,OACC,yBAAKO,UAAU,oBACd,2BAAOlB,MAAOW,EAAMQ,SAAUN,KAAKhB,aAAcuB,KAAK,SACrDP,KAAKQ,wB,GAjDoCC,IAAMC,WCHrC,0/DAmMLC,MAAM,MCnMD,m9BA+DQA,MAAM,MC3CdC,MAZf,WACE,OACE,yBAAKP,UAAU,OACf,sEAA2C,uBAAGQ,KAAK,uDAAR,UAA3C,KACE,yCACA,kBAAC,EAAD,CAAkB3B,MAAO4B,IACzB,wCACA,kBAAC,EAAD,CAAkB5B,MAAO6B,MCHXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33906038.chunk.js","sourcesContent":["import React from 'react';\n// import AutoCompleteText.css from '.';??\n\nexport default class AutoCompleteText extends React.Component {\n\t\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsuggestion: [],\n\t\t\ttext: '',\n\t\t};\n\n\t}\n\n\t\tonTextChange = (e) => {\n\t\t\tconst{ items } = this.props;\n\t\t\tconst value = e.target.value;\n\t\t\tlet suggestion = [];\n\t\t\tif (0 < value.length){\n\t\t\t\tconst regex = new RegExp(`^${value}`, 'i');\n\t\t\t\tsuggestion = items.sort().filter(v => regex.test(v))\n\t\t\t}\n\t\t\tthis.setState({suggestion, text: value});\n\t\t\t}\n\n\t\tsuggesSelected(value){\n\t\t\tthis.setState({suggestion: [], text: value});\n\t\t}\n\n\t\trenderSuggestion() {\n\t\t\tconst { suggestion } = this.state;\n\n\t\t\tif (suggestion.length === 0){\n\t\t\t\treturn (<div></div>);\n\t\t\t}\n\n\t\t\treturn(\n\t\t\t\t<ul>\n\t\t\t\t\t{suggestion.map((item) => <li onClick={() => this.suggesSelected(item)}>{item}</li>)}\n\t\t\t\t</ul>\n\n\t\t\t\t);\n\t\t}\n\t\n\n\trender(){\n\t\tconst {text} = this.state;\n\n\t\treturn(\n\t\t\t<div className=\"AutoCompleteText\">\n\t\t\t\t<input value={text} onChange={this.onTextChange} type=\"text\" />\n\t\t\t\t{this.renderSuggestion()}\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n","export default `Afghanistan\nAlbania\nAlgeria\nAndorra\nAngola\nAntigua & Deps\nArgentina\nArmenia\nAustralia\nAustria\nAzerbaijan\nBahamas\nBahrain\nBangladesh\nBarbados\nBelarus\nBelgium\nBelize\nBenin\nBhutan\nBolivia\nBosnia Herzegovina\nBotswana\nBrazil\nBrunei\nBulgaria\nBurkina\nBurundi\nCambodia\nCameroon\nCanada\nCape Verde\nCentral African Rep\nChad\nChile\nChina\nColombia\nComoros\nCongo\nCongo {Democratic Rep}\nCosta Rica\nCroatia\nCuba\nCyprus\nCzech Republic\nDenmark\nDjibouti\nDominica\nDominican Republic\nEast Timor\nEcuador\nEgypt\nEl Salvador\nEquatorial Guinea\nEritrea\nEstonia\nEthiopia\nFiji\nFinland\nFrance\nGabon\nGambia\nGeorgia\nGermany\nGhana\nGreece\nGrenada\nGuatemala\nGuinea\nGuinea-Bissau\nGuyana\nHaiti\nHonduras\nHungary\nIceland\nIndia\nIndonesia\nIran\nIraq\nIreland {Republic}\nIsrael\nItaly\nIvory Coast\nJamaica\nJapan\nJordan\nKazakhstan\nKenya\nKiribati\nKorea North\nKorea South\nKosovo\nKuwait\nKyrgyzstan\nLaos\nLatvia\nLebanon\nLesotho\nLiberia\nLibya\nLiechtenstein\nLithuania\nLuxembourg\nMacedonia\nMadagascar\nMalawi\nMalaysia\nMaldives\nMali\nMalta\nMarshall Islands\nMauritania\nMauritius\nMexico\nMicronesia\nMoldova\nMonaco\nMongolia\nMontenegro\nMorocco\nMozambique\nMyanmar, {Burma}\nNamibia\nNauru\nNepal\nNetherlands\nNew Zealand\nNicaragua\nNiger\nNigeria\nNorway\nOman\nPakistan\nPalau\nPanama\nPapua New Guinea\nParaguay\nPeru\nPhilippines\nPoland\nPortugal\nQatar\nRomania\nRussian Federation\nRwanda\nSt Kitts & Nevis\nSt Lucia\nSaint Vincent & the Grenadines\nSamoa\nSan Marino\nSao Tome & Principe\nSaudi Arabia\nSenegal\nSerbia\nSeychelles\nSierra Leone\nSingapore\nSlovakia\nSlovenia\nSolomon Islands\nSomalia\nSouth Africa\nSouth Sudan\nSpain\nSri Lanka\nSudan\nSuriname\nSwaziland\nSweden\nSwitzerland\nSyria\nTaiwan\nTajikistan\nTanzania\nThailand\nTogo\nTonga\nTrinidad & Tobago\nTunisia\nTurkey\nTurkmenistan\nTuvalu\nUganda\nUkraine\nUnited Arab Emirates\nUnited Kingdom\nUnited States\nUruguay\nUzbekistan\nVanuatu\nVatican City\nVenezuela\nVietnam\nYemen\nZambia\nZimbabwe`.split('\\n');","export default `Bob Pettit\nBob Cousy\nBill Russell\nBob Pettit\nWilt Chamberlain\nBill Russell\nBill Russell\nBill Russell\nOscar Robertson\nBill Russell\nWilt Chamberlain\nWilt Chamberlain\nWilt Chamberlain\nWes Unseld\nWillis Reed\nKareem Abdul-Jabbar\nKareem Abdul-Jabbar\nDace Cowens\nKareem Abdul-Jabbar\nBob McAdoo\nKareem Abdul-Jabbar\nKareem Abdul-Jabbar\nBill Walton\nMoses Malone\nKareem Abdul-Jabbar\nJulius Erving\nMoses Malone\nMoses Malone\nLarry Bird\nLarry Bird\nLarry Bird\nMagic Johnson\nMichael Jordan\nMagic Johnson\nMagic Johnson\nMichael Jordan\nMichael Jordan\nCharles Barkley\nHakeem Olajuwon\nDavid Robinson\nMichael Jordan\nKarl Malone\nMichael Jordan\nKarl Malone\nShaquille Oâ€™Neal\nAllen Iverson\nTim Duncan\nTim Duncan\nKevin Garnett\nSteve Nash\nSteve Nash\nDirk Nowitzki\nKobe Bryant\nLeBron James\nLeBron James\nDerrick Rose\nLeBron James\nLeBron James\nKevin Durant\nStephen Curry\nStephen Curry\nRussell Westbrook\nJames Harden\nGiannis Antetokounmpo`.split('\\n');","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './AutoCompleteText.css';\nimport AutoCompleteText from './component/AutoCompleteText';\nimport countries from './countries';\nimport nba from './nba';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h2>Autocomplete Search Component Display [<a href=\"https://github.com/phase7/autocomplete-search-react\">Source</a>]</h2>\n      <h3>Countries</h3>\n      <AutoCompleteText items={countries} />      \n      <h3>NBA MVPs</h3>\n      <AutoCompleteText items={nba} />      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}